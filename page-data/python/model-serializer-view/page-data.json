{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/model-serializer-view/","result":{"data":{"site":{"siteMetadata":{"title":"HoJin9622's Devlog","author":"HoJin9622","siteUrl":"https://hojin9622.github.io","comment":{"disqusShortName":"","utterances":"HoJin9622/HoJin9622.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"535611c2-7496-5ac9-a6e0-541790e123ba","excerpt":"Model 장고의 model에 하나의 클래스를 정의한다. 하나의 모델 클래스는 데이터베이스에서 하나의 테이블에 해당된다. 필드타입 CharField: 길이가 제한된 문자열 형식, max_length 옵션을 지정해야한다. TextField: 길이 제한이 없는 문자열 형식 IntegerField: 32비트 정수형 필드 BooleanField: True/False 필드 DateTimeField: 날짜와 시간을 갖는 필드. 날짜만 가질 경우 DateField, 시간만 가질 경우 TimeField…","html":"<h2 id=\"model\" style=\"position:relative;\"><a href=\"#model\" aria-label=\"model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model</h2>\n<p>장고의 model에 하나의 클래스를 정의한다.</p>\n<p>하나의 모델 클래스는 데이터베이스에서 하나의 테이블에 해당된다.</p>\n<ul>\n<li>\n<p>필드타입</p>\n<ul>\n<li>CharField: 길이가 제한된 문자열 형식, max_length 옵션을 지정해야한다.</li>\n<li>TextField: 길이 제한이 없는 문자열 형식</li>\n<li>IntegerField: 32비트 정수형 필드</li>\n<li>BooleanField: True/False 필드</li>\n<li>DateTimeField: 날짜와 시간을 갖는 필드. 날짜만 가질 경우 DateField, 시간만 가질 경우 TimeField, auto<em>now</em>add=True를 줄 경우 현재 시간을 자동으로 삽입한다.</li>\n<li>FileField: 파일 업로드 필드</li>\n<li>ImageField: 이미지 파일 필드</li>\n</ul>\n</li>\n<li>\n<p>필드옵션</p>\n<ul>\n<li>null: null=True이면 DB에서 null이 허용된다.</li>\n<li>blank: blank=False이면 이 필드는 DB에서 required 된다.</li>\n<li>primary_key: primary key Field 이다.</li>\n<li>unique: 해당 필드가 하나밖에 존재하지 못함을 표시한다.</li>\n<li>default: 필드의 default 값을 지정한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"serializer\" style=\"position:relative;\"><a href=\"#serializer\" aria-label=\"serializer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serializer</h2>\n<p>serializer는 model을 json 형태로 바꿔준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Addresses\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AddressesSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Addresses\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"phone_number\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"created\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Addresses 모델의 name, phone_number, address, created를 json 형태로 렌더링하게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    fields <span class=\"token operator\">=</span> <span class=\"token string\">\"__all__\"</span></code></pre></div>\n<p>위와 같이 fields를 지정하면 Addresses 모델의 모든 필드를 사용한다는 것을 나타낸다.</p>\n<h2 id=\"view\" style=\"position:relative;\"><a href=\"#view\" aria-label=\"view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View</h2>\n<p>View는 MVC의 Control과 비슷한 역할을 한다.</p>\n<p>장고에서는 MTV 패턴이라고하며 여기서 Template이 MVC의 View를 담당해서 헷갈릴 수 있다.</p>\n<p>view는 request를 받아드리고 response를 return한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse<span class=\"token punctuation\">,</span> JsonResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>decorators<span class=\"token punctuation\">.</span>csrf <span class=\"token keyword\">import</span> csrf_exempt\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Addresses\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> AddressesSerializer\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>parsers <span class=\"token keyword\">import</span> JSONParser\n\n\n<span class=\"token decorator annotation punctuation\">@csrf_exempt</span>\n<span class=\"token comment\"># Create your views here.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">address_list</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span>\n        query_set <span class=\"token operator\">=</span> Addresses<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        serializer <span class=\"token operator\">=</span> AddressesSerializer<span class=\"token punctuation\">(</span>query_set<span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> JSONParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        serializer <span class=\"token operator\">=</span> AddressesSerializer<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@csrf_exempt</span>\n<span class=\"token comment\"># Create your views here.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">address</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    obj <span class=\"token operator\">=</span> Addresses<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk<span class=\"token operator\">=</span>pk<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span>\n        serializer <span class=\"token operator\">=</span> AddressesSerializer<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> JSONParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        serializer <span class=\"token operator\">=</span> AddressesSerializer<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            serializer<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@csrf_exempt</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> JSONParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        search_name <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span>\n        obj <span class=\"token operator\">=</span> Addresses<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>search_name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>phone_number<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"phone_number\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">.</span>phone_number<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>request method가 GET, POST, DELETE, PUT인지에 따라 어떻게 동작할지 결졍 할 수 있다.</p>","frontmatter":{"title":"[Django] Model, Serializer, View","date":"September 20, 2020","thumbnail":null}}},"pageContext":{"slug":"/python/model-serializer-view/","previous":{"fields":{"slug":"/python/django-tutorial2/"},"frontmatter":{"title":"[Django] 기본 파일들의 역할","category":"Python","draft":false}},"next":{"fields":{"slug":"/javascript/react-native-font/"},"frontmatter":{"title":"[RN] React-Native에 폰트 적용","category":"JavaScript","draft":false}}}}}